extends ../layout
block content        
  include ../bar-admin.pug

  .content 
    img(class="serie-cover", src="/public/images/semioflix.png", alt=title)

    button.btn.btn-green(data-modal-controller="modal-create-season") <i class="fas fa-folder-plus"></i> Criar nova temporada
    .modal.modal-xxl(data-modal="modal-create-season")
      form.modal-content(action="/admin/season/create", method="POST", enctype="multipart/form-data")
        input(type="hidden", name="serieId", value=serie.id)
        .modal-header
          h2 <i class="fas fa-folder-plus"></i> Criar nova temporada
          button.modal-close <i class="fas fa-times-circle"></i>
        .modal-body
            .form-group 
              label(for="title") <i class="fas fa-hashtag"></i> Título da temporada
              input#title.form-control(type="text", placeholder="Título da temporada", required, name="season-title")
            .my-episodes-list#my-episodes-list
              each index, ep in [1]
                .episode(data-ep="ep-" + index)  
                  .updated
                    label.video-preview#episode-1-preview(for="episode-1") <i class="fas fa-video"></i> Selecione um vídeo
                    input(type="file", name="videos[]" , id="episode-1", required, accept="video/mp4,video/x-m4v,video/*")
                  .updated-infos 
                    .form-group 
                      label(for="episode-1-title") <i class="fas fa-hashtag"></i> Título do episódio
                      input#episode-1-title.form-control(type="text", placeholder="Título do episódio", required, name="ep-" + index + "-title")
                    .form-group
                      label(for="episode-1-description") <i class="fas fa-align-left"></i> Descrição do episódio
                      textarea#episode-1-description.form-control(type="text", placeholder="Descrição do episódio", required, name="ep-" + index + "-description")
                    .form-group
                      label(for="episode-1-visible") <i class="fas fa-clock"></i> Disponível para assistir?
                      select#episode-1-visible.form-control(name="ep-" + index + "-visible")
                        option(value="true") Sim
                        option(value="false") Não
                    .form-group
                      button.btn-remove-episode(type="button", data-remove-ep="ep-" + index) <i class="fas fa-trash"></i> Remover episódio
                      button.btn-move-up-episode(type="button", data-move-up-ep="ep-" + index) <i class="fas fa-arrow-up"></i> Mover para cima
                      button.btn-move-down-episode(type="button", data-move-down-ep="ep-" + index) <i class="fas fa-arrow-down"></i> Mover para baixo          
        .modal-footer
          button#data-btn-add-ep.btn.btn-blue(type="button") <i class="fas fa-folder-plus"></i> Inserir um novo episódio
          button.btn.btn-red(type="button", data-modal-cancel="modal-create-season") <i class="fas fa-times-circle"></i> Cancelar
          button.btn.btn-green(type="submit") <i class="fas fa-check-circle"></i> Finalizar
    
    button(type="button", class="btn btn-red", data-modal-controller="modal-delete-serie") <i class="fas fa-trash-alt"></i> Deletar série
    .modal.modal-md(data-modal="modal-delete-serie")
      .modal-content
        .modal-header
          h2 <i class="fas fa-trash-alt"></i> Deletar série
          button.modal-close <i class="fas fa-times-circle"></i>
        .modal-body
          p <i class="fas fa-exclamation-triangle"></i> Tem certeza que deseja deletar a série <strong>#{serie.title}</strong>?  
        .modal-footer
          button.btn.btn-blue(type="button", data-modal-cancel="modal-delete-serie") <i class="fas fa-times-circle"></i> Não, cancelar
          a.btn-link.btn-green(href="/admin/serie/delete/" +  serie.id) <i class="fas fa-check-circle"></i> SIm, deletar série

    button(type="button", class="btn btn-blue", data-modal-controller="modal-edit-serie") <i class="fas fa-edit"></i> Editar série
    .modal.modal-xxl(data-modal="modal-edit-serie")
      form.modal-content(action="/admin/serie/update", method="POST", enctype="multipart/form-data")
        input(type="hidden", name="id", value=serie.id)
        .modal-header
          h2 <i class="fas fa-edit"></i> Editar série
          button.modal-close <i class="fas fa-times-circle"></i>
        .modal-body
          .row 
            .d-flex-column-center.w-25
              img(class="", src=serie.cover, alt=serie.title, width="150px")
              .form-group 
                label(for="cover") <i class="fas fa-image"></i> Capa
                input#cover.form-control(type="file", placeholder="Capa da série", name="cover")
            .w-75
              .form-group 
                label(for="title") <i class="fas fa-hashtag"></i> Título
                input#title.form-control(type="text", placeholder="Título da série", required, name="title", value=serie.title)
              .form-group
                label(for="description") <i class="fas fa-align-justify"></i> Descrição
                textarea#description.form-control(placeholder="Descrição da série", required, name="description") #{serie.description}
              .form-group
                label(for="cast") <i class="fas fa-users-rectangle"></i> Elenco
                input#cast.form-control(type="text", placeholder="Elenco da série", required, name="cast", value=serie.cast)
              .form-group
                label(for="disponible") <i class="fas fa-play"></i> Disponível para assistir?
                select#disponible.form-control(name="visible", required, value=serie.visible)
                  option(value="true") Sim
                  option(value="false") Não
              //- .form-group#image-group
              //-   label.text-file-preview(for="image") <i class="fas fa-images"></i> Clique para selecionar uma imagem
              //-   input#image.form-control(type="file", accept="image/*", name="cover", required)                          

          button.btn.btn-red(type="button", data-modal-cancel="modal-edit-serie") <i class="fas fa-times-circle"></i> Cancelar
          button.btn.btn-green(type="submit") <i class="fas fa-check-circle"></i> Finalizar

    .serie-infos
      h1.serie-title #{serie.title}
      small.serie-createdBy #{new Date(serie.createdAt).toLocaleDateString("pt-BR", { year: 'numeric', month: 'long', day: 'numeric' })} 
      p.serie-description #{serie.description}
      .serie-metrics  
        span.serie-metric <i class="fas fa-star"></i> 4.5
        span.serie-metric <i class="fas fa-heart"></i> #{serie.likes}
        span.serie-metric <i class="fas fa-eye"></i> #{serie.views}
      p.serie-cast 
        strong Estrelando: #{serie.cast}
      button.serie-btn-play <i class="fas fa-play"></i> Assistir 

      h2.serie-title Temporadas & Episódios

      div.serie-seasons 
        each season, index in serie.Seasons
          button(class="btn-serie-season " + (index == 0 ? "active" : "") , data-btn-season="season"+ index) Temporada #{index + 1}: #{season.title}

      each season, index in serie.Seasons
        div.serie-episodes(data-season="season"+ index, class=(index == 0 ? "active" : ""))
          each episode, index2 in season.episodes
            div.serie-episode
              a(href="/watch/" + season.id + "/" + episode.id)
                img(class="serie-episode-cover", src="/public/images/semioflix.png", alt=episode.title)
              div.serie-episode-infos
                h3.serie-episode-title Episódio #{index2 + 1}: #{episode.title} 
                p.serie-episode-description #{episode.description}
                a.serie-btn-play(href="/watch/" + season.id + "/" + episode.id) <i class="fas fa-play"></i> Assistir 


  script. 
    const btnSeasons = document.querySelectorAll("[data-btn-season]");
    const episodes = document.querySelectorAll(".serie-episodes");

    btnSeasons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const season = btn.getAttribute("data-btn-season");
        episodes.forEach((episode) => {
          episode.classList.remove("active");
        });
        document.querySelector(`[data-season="${season}"]`).classList.add("active");
        btnSeasons.forEach((btn) => {
          btn.classList.remove("active");
        });
        btn.classList.add("active");
      });
    });

    //- document.querySelector("#add-movie-button").addEventListener("click", () => {
    //-   document.querySelector(".modal-new-movie").style.display = "block";
    //- });

    //- document.querySelector(".close-modal").addEventListener("click", () => {
    //-   document.querySelector(".modal-new-movie").style.display = "none";
    //- });

    //- window.addEventListener("click", (event) => {
    //-   if (event.target == document.querySelector(".modal-new-movie")) {
    //-     document.querySelector(".modal-new-movie").style.display = "none";
    //-   }
    //- });

    //- document.querySelector(".btn-cancel").addEventListener("click", () => {
    //-   document.querySelector(".modal-new-movie").style.display = "none";
    //- });

    //- document.querySelector(".modal-new-movie").addEventListener("keydown", (event) => {
    //-   if (event.key == "Escape" || event.key == "Esc") {
    //-     document.querySelector(".modal-new-movie").style.display = "none";
    //-   }
    //- });


    let qtd = 1;

    document.querySelector("#data-btn-add-ep").addEventListener("click", () => {
      qtd++;

      let episode = document.createElement("div");
      episode.classList.add("episode");
      episode.setAttribute("data-ep", "ep-" + qtd);

      episode.innerHTML = `
        <div class="updated">
          <label class="video-preview" for="episode-${qtd}"><i class="fas fa-video"></i> Selecione um vídeo</label>
          <input type="file" name="videos[]" id="episode-${qtd}" class="form-control" required accept="video/mp4,video/x-m4v,video/*">
        </div>
        <div class="updated-infos">
          <div class="form-group">
            <label for="episode-${qtd}-title"><i class="fas fa-hashtag"></i> Título do episódio</label>
            <input id="episode-${qtd}-title" class="form-control" type="text" placeholder="Título do episódio" required name="ep-${qtd}-title">
          </div>
          <div class="form-group">
            <label for="episode-${qtd}-description"><i class="fas fa-align-left"></i> Descrição do episódio</label>
            <textarea id="episode-${qtd}-description" class="form-control" type="text" placeholder="Descrição do episódio" required name="ep-${qtd}-description"></textarea>
          </div>
          <div class="form-group">
            <label for="episode-${qtd}-visible"><i class="fas fa-clock"></i> Disponível para assistir?</label>
            <select id="episode-${qtd}-visible" class="form-control" name="ep-${qtd}-visible" required>
              <option value="true">Sim</option>
              <option value="false">Não</option>
            </select>
          </div>
          <div class="form-group">
            <button class="btn-remove-episode" type="button" data-remove-ep="ep-${qtd}"><i class="fas fa-trash"></i> Remover episódio</button>
            <button class="btn-move-up-episode" type="button" data-move-up-ep="ep-${qtd}"><i class="fas fa-arrow-up"></i> Mover para cima</button>
            <button class="btn-move-down-episode" type="button" data-move-down-ep="ep-${qtd}"><i class="fas fa-arrow-down"></i> Mover para baixo</button>
          </div>
        </div>
      `

      document.querySelector("#my-episodes-list").appendChild(episode);   

      init();
    });
    
    function init(){
      document.querySelectorAll("[data-remove-ep]").forEach(btn => {
        btn.addEventListener("click", () => {
          const ep = btn.getAttribute("data-remove-ep");
          document.querySelector(`[data-ep="${ep}"]`).remove();
        });
      });
      
      document.querySelectorAll("[data-move-up-ep]").forEach(btn => {
        btn.addEventListener("click", () => {
          const ep = btn.getAttribute("data-move-up-ep");
          const epElement = document.querySelector(`[data-ep="${ep}"]`);
          const epElementPrev = epElement.previousElementSibling;
          if (epElementPrev) epElementPrev.before(epElement);  
        });
      });
      
      document.querySelectorAll("[data-move-down-ep]").forEach(btn => {
        btn.addEventListener("click", () => {
          const ep = btn.getAttribute("data-move-down-ep");
          const epElement = document.querySelector(`[data-ep="${ep}"]`);
          const epElementNext = epElement.nextElementSibling;
          if (epElementNext) epElementNext.after(epElement);  
        });
      });

      document.querySelectorAll("[name='videos[]']").forEach(input => {
        input.addEventListener("change", () => {
          const videoPreview = input.previousElementSibling;
          const video = input.files[0];
          const videoURL = URL.createObjectURL(video);
          videoPreview.style.display = "none";

          let myVideo = document.createElement("div");
          myVideo.classList.add("video-preview");
          myVideo.innerHTML = `
            <div>
              <video src="${videoURL}" controls width="80%"></video>
              <button onclick="removeVideo(this, '${input.getAttribute('id')}', '${videoPreview.getAttribute('for')}')" type="button" class="btn-remove-video"><i class="fas fa-trash"></i> Remover vídeo</button>
            </div>
          `;

          input.parentElement.appendChild(myVideo);         
        });
      });

    }

    function removeVideo(e, input, videoPreview){
      
      document.querySelector(`#${input}`).value = "";
      document.querySelector(`[for="${videoPreview}"]`).style.display = "flex";
          
      e.parentElement.parentElement.remove();
    }

    init();